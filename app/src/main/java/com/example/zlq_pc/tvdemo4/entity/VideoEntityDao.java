package com.example.zlq_pc.tvdemo4.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_ENTITY".
*/
public class VideoEntityDao extends AbstractDao<VideoEntity, Void> {

    public static final String TABLENAME = "VIDEO_ENTITY";

    /**
     * Properties of entity VideoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uri = new Property(0, String.class, "uri", false, "URI");
        public final static Property CurrentPosition = new Property(1, Long.class, "currentPosition", false, "CURRENT_POSITION");
    };


    public VideoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public VideoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_ENTITY\" (" + //
                "\"URI\" TEXT," + // 0: uri
                "\"CURRENT_POSITION\" INTEGER);"); // 1: currentPosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoEntity entity) {
        stmt.clearBindings();
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(1, uri);
        }
 
        Long currentPosition = entity.getCurrentPosition();
        if (currentPosition != null) {
            stmt.bindLong(2, currentPosition);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoEntity entity) {
        stmt.clearBindings();
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(1, uri);
        }
 
        Long currentPosition = entity.getCurrentPosition();
        if (currentPosition != null) {
            stmt.bindLong(2, currentPosition);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VideoEntity readEntity(Cursor cursor, int offset) {
        VideoEntity entity = new VideoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uri
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // currentPosition
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoEntity entity, int offset) {
        entity.setUri(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCurrentPosition(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VideoEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VideoEntity entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
